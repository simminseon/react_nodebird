{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpdate: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\nexport const loginAction = () => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT',\n    data\n  };\n}; // action creator\n\nconst ChangeNickname = data => {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data\n  };\n};\n\nChangeNickname('sunnyss');\nstore.dispatch(ChangeNickname('바꿔바꿔')); // (이전상태, 액션) => 다음상태\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/sunny.sim/react_nodebird/front/reducers/index.js"],"names":["HYDRATE","initialState","user","isLoggedIn","signUpdate","loginData","post","mainPosts","loginAction","type","data","logoutAction","ChangeNickname","store","dispatch","rootReducer","state","action","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAE,KADR;AAEJD,IAAAA,IAAI,EAAE,IAFF;AAGJE,IAAAA,UAAU,EAAE,EAHR;AAIJC,IAAAA,SAAS,EAAE;AAJP,GADa;AAOnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE;AADP;AAPa,CAArB;AAYA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAE,QADD;AAELC,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMC,YAAY,GAAG,MAAM;AAChC,SAAO;AACLF,IAAAA,IAAI,EAAE,SADD;AAELC,IAAAA;AAFK,GAAP;AAID,CALM,C,CAOP;;AACA,MAAME,cAAc,GAAIF,IAAD,IAAU;AAC/B,SAAO;AACLD,IAAAA,IAAI,EAAE,iBADD;AAELC,IAAAA;AAFK,GAAP;AAID,CALD;;AAOAE,cAAc,CAAC,SAAD,CAAd;AAEAC,KAAK,CAACC,QAAN,CAAeF,cAAc,CAAC,MAAD,CAA7B,E,CAEA;;AACA,MAAMG,WAAW,GAAG,CAACC,KAAK,GAAGf,YAAT,EAAuBgB,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACR,IAAf;AACE,SAAKT,OAAL;AACE,6CAAYgB,KAAZ,GAAsBC,MAAM,CAACC,OAA7B;;AACF,SAAK,QAAL;AACE,6CACKF,KADL;AAEEd,QAAAA,IAAI,kCACCc,KAAK,CAACd,IADP;AAEFC,UAAAA,UAAU,EAAE,IAFV;AAGFD,UAAAA,IAAI,EAAEe,MAAM,CAACP;AAHX;AAFN;;AAQF,SAAK,SAAL;AACE,6CACKM,KADL;AAEEd,QAAAA,IAAI,kCACCc,KAAK,CAACd,IADP;AAEFC,UAAAA,UAAU,EAAE,KAFV;AAGFD,UAAAA,IAAI,EAAE;AAHJ;AAFN;;AAQF;AACE,aAAOc,KAAP;AAtBJ;AAwBD,CAzBD;;AA2BA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\n\n\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpdate: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: [],\n  }\n}\n\nexport const loginAction = () => {\n  return {\n    type: 'LOG_IN',\n    data\n  }\n}\n\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT',\n    data\n  }\n}\n\n// action creator\nconst ChangeNickname = (data) => {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data,\n  }\n}\n\nChangeNickname('sunnyss');\n\nstore.dispatch(ChangeNickname('바꿔바꿔'));\n\n// (이전상태, 액션) => 다음상태\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE: \n      return { ...state, ...action.payload }\n    case 'LOG_IN':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          isLoggedIn: true,\n          user: action.data\n        }\n      };\n    case 'LOG_OUT':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          isLoggedIn: false,\n          user: null\n        }\n      };\n    default: \n      return state\n  }\n};\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}